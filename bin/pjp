#!/bin/sh

abort() {
	echo "$@"
	exit 1
}

help() {
	cat << HELP
USAGE:
  pjp [OPTIONS] [PROPERTY...]

OPTIONS:
  -d, --java-home <java home> Overwrites JAVA_HOME
  -r, --runtime <java>        Specifies executable runtime path
  -c, --compiler <javac>      Specifies executable compiler path
  -t, --target <jdk version>  Specifies target JDK version

FLAGS:
  -f, --force-compile         Force compile
  -h, --help                  Prints this message
HELP
}

compile() {
	command -v "$PJP_JAVAC" >/dev/null 2>&1 \
		|| abort "'$PJP_JAVAC' not found."
	"$PJP_JAVAC" -source "$PJP_JDK_VERSION" -target "$PJP_JDK_VERSION" -d "$CLASS_PATH" "$SOURCE_FILE" >/dev/null 2>&1 \
		|| abort 'Failed to compile pjp.'
}

quot() {
	printf %s "'"
	printf %s "$1" | sed -e "s/'/'$DQ'$DQ'/g"
	printf %s "'"
}

push_arg() {
	case "$ARGS" in
		'') ARGS="$(quot "$1")";;
		*) ARGS="$ARGS $(quot "$1")";;
	esac
}

print_opt() {
	case "$2" in
		"$1")
			printf %s "$3"
			;;
		"$1"=*)
			printf %s "$1$TAB$2" | awk -F'\t' 'NR==1{print substr($2,length($1)+2)}'
			;;
		"$1"*)
			printf %s "$1$TAB$2" | awk -F'\t' 'NR==1{print substr($2,length($1)+1)}'
			;;
	esac
}

print_unix_path() {
	case "$1" in
		[a-zA-Z]':'*)
			printf %s "$1" | awk -F':' '{d="/" tolower($1);gsub(/\\/,"/");print d substr($0,3)}'
			;;
	esac
}

PJP=pjp
TAB=$(printf '\t_')
TAB="${TAB%_}"
DQ='"'
BIN="$0"
while true; do
  cd "$(dirname "$BIN")"
  BIN="$(basename "$BIN")"
  if [ -L "$BIN" ]; then
    BIN="$(readlink "$BIN")"
  else
    break
  fi
done
BIN="$(pwd)/$BIN"
ROOT="$(cd "$(dirname "$BIN")/.."&&pwd)"
WD="$HOME/.pjp"
ARGS=''
COMPILE=0
CYGWIN=0

if [ "$PJP_JAVA_HOME" = '' ]; then
	PJP_JAVA_HOME="$JAVA_HOME"
fi

case "$(uname -s)" in
	MINGW*|MSYS*)
		PJP_JAVA_HOME="$(print_unix_path "$PJP_JAVA_HOME")"
		;;
	CYGWIN*)
		CYGWIN=1
		if [ "$PJP_CYGDRIVE" = '' ]; then
			PJP_CYGDRIVE='/cygdrive'
		fi
		PJP_JAVA_HOME="$(
			printf %s "${PJP_CYGDRIVE%/}"
			print_unix_path "$PJP_JAVA_HOME"
		)"
		;;
esac

while [ "$#" != '0' ]; do
	case "$1" in
		--force-compile|-f)
			COMPILE=1
			;;
		--help|-h)
			help
			exit 0
			;;
		*)
			is_arg=1
			while read tuple; do
				opt="${tuple#*,}"
				case "$1" in
					"$opt"*)
					    is_arg=0
						eval "${tuple%,*}=$(quot "$(print_opt "$opt" "$1" "$2")")"
						[ "$opt" = "$1" ] && shift
						break
						;;
				esac
			done <<OPTS
PJP_JAVA,-r
PJP_JAVA,--runtime
PJP_JAVAC,-c
PJP_JAVAC,--compiler
PJP_JAVA_HOME,-d
PJP_JAVA_HOME,--java-home
PJP_JDK_VERSION,-t
PJP_JDK_VERSION,--target
OPTS
			[ $is_arg -eq 1 ] && push_arg "$1"
			;;
	esac
	shift
done

if [ "$PJP_JAVA" = '' ]; then
	if [ "$PJP_JAVA_HOME" = '' ]; then
		PJP_JAVA='java'
	else
		PJP_JAVA="${PJP_JAVA_HOME%/}/bin/java"
		[ -f "$PJP_JAVA" ] || PJP_JAVA='java'
	fi
fi

if [ "$PJP_JAVAC" = '' ]; then
	if [ "$PJP_JAVA_HOME" = '' ]; then
		PJP_JAVAC='javac'
	else
		PJP_JAVAC="${PJP_JAVA_HOME%/}/bin/javac"
		[ -f "$PJP_JAVAC" ] || PJP_JAVAC='javac'
	fi
fi

command -v "$PJP_JAVA" >/dev/null 2>&1 \
	|| abort "'$PJP_JAVA' not found."

if [ "$PJP_JDK_VERSION" = '' ]; then
	PJP_JDK_VERSION="$(
		"$PJP_JAVA" -version 2>&1 | awk -F'"' \
'NR==1{
pos=match($2,/^(1\.[4-8]|([1-9][0-9]+|9)([^0-9]|$))/);
if(pos!=0){
len=RLENGTH;
if(match(substr($2,pos+len-1,1),/[0-9]/)==0)len--;
print substr($2,pos,len);
}
}'
	)"
fi

case "$PJP_JDK_VERSION" in
	'1.'[2-8]|9|[1-9][0-9]) ;;
	'1.9') PJP_JDK_VERSION=9;;
	'1.10') PJP_JDK_VERSION=10;;
	[2-8]) PJP_JDK_VERSION="1.$PJP_JDK_VERSION";;
	*) abort "Invalid target: $PJP_JDK_VERSION";;
esac

case "$PJP_JDK_VERSION" in
	'1.'[2-5]) PJP=pjp_legacy;;
esac

CLASS_PATH="$WD/$PJP_JDK_VERSION"
CLASS_FILE="$CLASS_PATH/$PJP.class"
SOURCE_FILE="$ROOT/src/pjp/$PJP.java"

case "$CYGWIN" in
	1)
		CLASS_PATH="$(cygpath -w "$CLASS_PATH")"
		SOURCE_FILE="$(cygpath -w "$SOURCE_FILE")"
		;;
esac

if [ ! -d "$CLASS_PATH" ]; then
	mkdir -p "$CLASS_PATH"
fi

if [ "$COMPILE" = 1 ] || [ ! -f "$CLASS_FILE" ]; then
	compile
fi

eval "$(quot "$PJP_JAVA") -classpath $(quot "$CLASS_PATH") $PJP $ARGS"

exit 0
